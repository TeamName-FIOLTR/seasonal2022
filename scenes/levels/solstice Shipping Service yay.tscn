[gd_scene load_steps=116 format=2]

[ext_resource path="res://assets/textures/Solstice Shipping Service Banner Mask.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/Solstice Shipping Service Acronum Mask Square.png" type="Texture" id=2]
[ext_resource path="res://assets/shaders/metal door.tres" type="Material" id=3]
[ext_resource path="res://assets/textures/Solstice Shipping Service Acronym Mask.png" type="Texture" id=4]
[ext_resource path="res://scenes/levels/solstice Shipping Service yay.gd" type="Script" id=5]
[ext_resource path="res://assets/models/solstice Shipping Service yay.glb" type="PackedScene" id=6]
[ext_resource path="res://assets/sounds/cool big door.wav" type="AudioStream" id=7]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0.469514, 0.287786, 0.0808173, 1 )

[sub_resource type="VisualShader" id=2]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.469514, 0.287786, 0.080817);
	float n_out2p1 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -270.065, 70.8043 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 200, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[sub_resource type="VisualShaderNodeColorConstant" id=4]
constant = Color( 1, 1, 1, 0 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 4 )

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out2p1 = 0.000000;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out2p1;
	EMISSION = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -173.37, 205.826 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( 60, 140 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -140, 260 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 0, 5 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )

[sub_resource type="VisualShaderNodeColorConstant" id=8]
output_port_for_preview = 0
constant = Color( 0.242952, 0.239218, 0.239218, 1 )

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.242952, 0.239218, 0.239218);
	float n_out2p1 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -270.065, 70.8043 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( 160, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="BoxShape" id=98]
extents = Vector3( 0.046, 1.222, 0.96 )

[sub_resource type="BoxShape" id=99]
extents = Vector3( 0.046, 1.222, 0.920451 )

[sub_resource type="QuadMesh" id=11]
size = Vector2( 3.99, 2 )

[sub_resource type="VisualShaderNodeExpression" id=12]
size = Vector2( 250, 150 )

[sub_resource type="VisualShaderNodeTransformCompose" id=13]

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = -23.239

[sub_resource type="VisualShaderNodeScalarFunc" id=17]
function = 27

[sub_resource type="VisualShaderNodeVectorCompose" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeColorConstant" id=21]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeTransformVecMult" id=22]

[sub_resource type="VisualShaderNodeScalarFunc" id=23]
function = 23

[sub_resource type="VisualShaderNodeScalarConstant" id=24]
constant = 0.239

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "point_coord"

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=28]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=29]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.99506, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorClamp" id=30]

[sub_resource type="VisualShaderNodeVectorOp" id=31]

[sub_resource type="VisualShaderNodeTexture" id=32]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeVec3Constant" id=33]
constant = Vector3( -0.063, 0.113, 0 )

[sub_resource type="VisualShaderNodeVectorOp" id=34]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=35]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=36]

[sub_resource type="VisualShaderNodeScalarConstant" id=37]
constant = 0.793

[sub_resource type="VisualShaderNodeInput" id=38]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=39]

[sub_resource type="VisualShaderNodeInput" id=40]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarInterp" id=41]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=42]

[sub_resource type="VisualShaderNodeColorConstant" id=43]
constant = Color( 0, 0.576343, 1, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=44]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=45]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=46]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=47]

[sub_resource type="VisualShaderNodeScalarOp" id=48]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=49]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=50]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=51]
constant = 24.871

[sub_resource type="VisualShaderNodeScalarOp" id=52]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=53]
constant = 0.608

[sub_resource type="VisualShaderNodeScalarConstant" id=54]
constant = 17.311

[sub_resource type="VisualShaderNodeScalarConstant" id=55]
constant = 0.404

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=57]
input_name = "uv"

[sub_resource type="VisualShader" id=58]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx;

uniform sampler2D tex_frg_26;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out2p1 = 1.000000;

// Scalar:51
	float n_out51p0 = 0.404000;

// Scalar:5
	float n_out5p0 = 0.608000;

// Input:37
	float n_out37p0 = TIME;

// Scalar:50
	float n_out50p0 = 17.311001;

// ScalarOp:49
	float n_out49p0 = n_out37p0 * n_out50p0;

// Input:35
	vec3 n_out35p0 = vec3(UV, 0.0);

// VectorDecompose:36
	float n_out36p0 = n_out35p0.x;
	float n_out36p1 = n_out35p0.y;
	float n_out36p2 = n_out35p0.z;

// Scalar:48
	float n_out48p0 = 24.871000;

// ScalarOp:47
	float n_out47p0 = n_out36p1 * n_out48p0;

// ScalarOp:44
	float n_out44p0 = n_out49p0 + n_out47p0;

// ScalarFunc:43
	float n_out43p0 = sin(n_out44p0);

// ScalarOp:45
	float n_in45p1 = 1.00000;
	float n_out45p0 = n_out43p0 + n_in45p1;

// ScalarOp:46
	float n_in46p1 = 2.00000;
	float n_out46p0 = n_out45p0 / n_in46p1;

// Scalar:15
	float n_out15p0 = -23.239000;

// ScalarFunc:16
	float n_out16p0 = radians(n_out15p0);

// ScalarFunc:14
	float n_out14p0 = cos(n_out16p0);

// ScalarFunc:13
	float n_out13p0 = sin(n_out16p0);

// VectorCompose:17
	float n_in17p2 = 0.00000;
	vec3 n_out17p0 = vec3(n_out14p0, n_out13p0, n_in17p2);

// ScalarOp:18
	float n_in18p1 = -1.00000;
	float n_out18p0 = n_out13p0 * n_in18p1;

// VectorCompose:19
	float n_in19p2 = 0.00000;
	vec3 n_out19p0 = vec3(n_out18p0, n_out14p0, n_in19p2);

// TransformCompose:12
	vec3 n_in12p2 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in12p3 = vec3(0.00000, 0.00000, 0.00000);
	mat4 n_out12p0 = mat4(vec4(n_out17p0, 0.0), vec4(n_out19p0, 0.0), vec4(n_in12p2, 0.0), vec4(n_in12p3, 1.0));

// Input:25
	vec3 n_out25p0 = vec3(UV, 0.0);

// VectorOp:27
	vec3 n_in27p1 = vec3(1.99506, 1.00000, 0.00000);
	vec3 n_out27p0 = n_out25p0 * n_in27p1;

// VectorOp:31
	vec3 n_in31p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out31p0 = n_out27p0 - n_in31p1;

// TransformVectorMult:20
	vec3 n_out20p0 = (n_out12p0 * vec4(n_out31p0, 1.0)).xyz;

// VectorOp:32
	vec3 n_in32p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out32p0 = n_out20p0 + n_in32p1;

// Scalar:34
	float n_out34p0 = 0.793000;

// VectorScalarMix:33
	vec3 n_in33p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out33p0 = mix(n_in33p0, n_out32p0, n_out34p0);

// Vector:30
	vec3 n_out30p0 = vec3(-0.063000, 0.113000, 0.000000);

// VectorOp:29
	vec3 n_out29p0 = n_out33p0 + n_out30p0;

// VectorClamp:28
	vec3 n_in28p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in28p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out28p0 = clamp(n_out29p0, n_in28p1, n_in28p2);

// Texture:26
	vec4 tex_frg_26_read = texture(tex_frg_26, n_out28p0.xy);
	vec3 n_out26p0 = tex_frg_26_read.rgb;
	float n_out26p1 = tex_frg_26_read.a;

// ScalarOp:42
	float n_out42p0 = n_out46p0 * dot(n_out26p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarMix:38
	float n_out38p0 = mix(n_out51p0, n_out5p0, n_out42p0);

// ScalarOp:52
	float n_out52p0 = n_out38p0 * dot(n_out26p0, vec3(0.333333, 0.333333, 0.333333));

// Color:40
	vec3 n_out40p0 = vec3(0.000000, 0.576343, 1.000000);
	float n_out40p1 = 1.000000;

// VectorOp:41
	vec3 n_out41p0 = vec3(n_out52p0) * n_out40p0;

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = n_out41p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -230.815, 90.8043 )
modes/blend = 1
nodes/fragment/0/position = Vector2( 1500, 160 )
nodes/fragment/2/node = SubResource( 21 )
nodes/fragment/2/position = Vector2( 20, 140 )
nodes/fragment/3/node = SubResource( 32 )
nodes/fragment/3/position = Vector2( -220, 220 )
nodes/fragment/4/node = SubResource( 42 )
nodes/fragment/4/position = Vector2( 1020, 260 )
nodes/fragment/5/node = SubResource( 53 )
nodes/fragment/5/position = Vector2( 500, 140 )
nodes/fragment/6/node = SubResource( 57 )
nodes/fragment/6/position = Vector2( -620, 440 )
nodes/fragment/11/node = SubResource( 12 )
nodes/fragment/11/position = Vector2( -480, 240 )
nodes/fragment/11/size = Vector2( 250, 150 )
nodes/fragment/11/input_ports = ""
nodes/fragment/11/output_ports = ""
nodes/fragment/11/expression = ""
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( -520, 180 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( -1080, 240 )
nodes/fragment/14/node = SubResource( 15 )
nodes/fragment/14/position = Vector2( -1100, 160 )
nodes/fragment/15/node = SubResource( 16 )
nodes/fragment/15/position = Vector2( -1640, 200 )
nodes/fragment/16/node = SubResource( 17 )
nodes/fragment/16/position = Vector2( -1320, 200 )
nodes/fragment/17/node = SubResource( 18 )
nodes/fragment/17/position = Vector2( -360, 100 )
nodes/fragment/18/node = SubResource( 19 )
nodes/fragment/18/position = Vector2( -900, 340 )
nodes/fragment/19/node = SubResource( 20 )
nodes/fragment/19/position = Vector2( -700, 320 )
nodes/fragment/20/node = SubResource( 22 )
nodes/fragment/20/position = Vector2( -440, 500 )
nodes/fragment/21/node = SubResource( 23 )
nodes/fragment/21/position = Vector2( -1500, 120 )
nodes/fragment/22/node = SubResource( 24 )
nodes/fragment/22/position = Vector2( -1760, 100 )
nodes/fragment/23/node = SubResource( 25 )
nodes/fragment/23/position = Vector2( -840, 480 )
nodes/fragment/24/node = SubResource( 26 )
nodes/fragment/24/position = Vector2( -720, 540 )
nodes/fragment/25/node = SubResource( 27 )
nodes/fragment/25/position = Vector2( -940, 660 )
nodes/fragment/26/node = SubResource( 28 )
nodes/fragment/26/position = Vector2( 40, 300 )
nodes/fragment/27/node = SubResource( 29 )
nodes/fragment/27/position = Vector2( -780, 660 )
nodes/fragment/28/node = SubResource( 30 )
nodes/fragment/28/position = Vector2( -120, 480 )
nodes/fragment/29/node = SubResource( 31 )
nodes/fragment/29/position = Vector2( -60, 760 )
nodes/fragment/30/node = SubResource( 33 )
nodes/fragment/30/position = Vector2( -760, 780 )
nodes/fragment/31/node = SubResource( 34 )
nodes/fragment/31/position = Vector2( -500, 640 )
nodes/fragment/32/node = SubResource( 35 )
nodes/fragment/32/position = Vector2( -260, 620 )
nodes/fragment/33/node = SubResource( 36 )
nodes/fragment/33/position = Vector2( -68.3695, 715.076 )
nodes/fragment/34/node = SubResource( 37 )
nodes/fragment/34/position = Vector2( -320, 760 )
nodes/fragment/35/node = SubResource( 38 )
nodes/fragment/35/position = Vector2( 60, 240 )
nodes/fragment/36/node = SubResource( 39 )
nodes/fragment/36/position = Vector2( 260, 240 )
nodes/fragment/37/node = SubResource( 40 )
nodes/fragment/37/position = Vector2( 20, 580 )
nodes/fragment/38/node = SubResource( 41 )
nodes/fragment/38/position = Vector2( 860, 300 )
nodes/fragment/40/node = SubResource( 43 )
nodes/fragment/40/position = Vector2( 1080, 500 )
nodes/fragment/41/node = SubResource( 44 )
nodes/fragment/41/position = Vector2( 1260, 300 )
nodes/fragment/42/node = SubResource( 45 )
nodes/fragment/42/position = Vector2( 760, 420 )
nodes/fragment/43/node = SubResource( 46 )
nodes/fragment/43/position = Vector2( 620, 580 )
nodes/fragment/44/node = SubResource( 47 )
nodes/fragment/44/position = Vector2( 460, 460 )
nodes/fragment/45/node = SubResource( 48 )
nodes/fragment/45/position = Vector2( 640, 680 )
nodes/fragment/46/node = SubResource( 49 )
nodes/fragment/46/position = Vector2( 820, 600 )
nodes/fragment/47/node = SubResource( 50 )
nodes/fragment/47/position = Vector2( 560, 260 )
nodes/fragment/48/node = SubResource( 51 )
nodes/fragment/48/position = Vector2( 380, 160 )
nodes/fragment/49/node = SubResource( 52 )
nodes/fragment/49/position = Vector2( 240, 460 )
nodes/fragment/50/node = SubResource( 54 )
nodes/fragment/50/position = Vector2( 20, 640 )
nodes/fragment/51/node = SubResource( 55 )
nodes/fragment/51/position = Vector2( 740, 200 )
nodes/fragment/52/node = SubResource( 56 )
nodes/fragment/52/position = Vector2( 1080, 360 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 16, 0, 13, 0, 16, 0, 14, 0, 14, 0, 17, 0, 13, 0, 17, 1, 13, 0, 18, 0, 18, 0, 19, 0, 14, 0, 19, 1, 19, 0, 12, 1, 17, 0, 12, 0, 20, 0, 3, 0, 22, 0, 21, 0, 25, 0, 27, 0, 28, 0, 26, 0, 12, 0, 20, 0, 15, 0, 16, 0, 30, 0, 29, 1, 27, 0, 31, 0, 31, 0, 20, 1, 20, 0, 32, 0, 29, 0, 28, 0, 32, 0, 33, 1, 34, 0, 33, 2, 33, 0, 29, 0, 35, 0, 36, 0, 40, 0, 41, 1, 41, 0, 0, 5, 5, 0, 38, 1, 38, 0, 4, 2, 44, 0, 43, 0, 26, 0, 42, 1, 42, 0, 38, 2, 43, 0, 45, 0, 45, 0, 46, 0, 46, 0, 42, 0, 36, 1, 47, 0, 48, 0, 47, 1, 47, 0, 44, 1, 37, 0, 49, 0, 50, 0, 49, 1, 49, 0, 44, 0, 51, 0, 38, 0, 38, 0, 52, 0, 26, 0, 52, 1, 52, 0, 41, 0 )

[sub_resource type="ShaderMaterial" id=59]
shader = SubResource( 58 )

[sub_resource type="QuadMesh" id=60]
size = Vector2( 4.636, 0.464 )

[sub_resource type="VisualShaderNodeInput" id=61]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=62]

[sub_resource type="VisualShaderNodeScalarOp" id=63]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=64]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=65]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=66]
constant = 53.646

[sub_resource type="VisualShaderNodeTexture" id=67]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=68]
constant = Color( 0.139336, 0.873452, 0.989046, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=69]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=70]

[sub_resource type="VisualShaderNodeScalarInterp" id=71]
default_input_values = [ 0, 0.95, 1, 1.0, 2, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=72]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=73]

[sub_resource type="VisualShaderNodeScalarConstant" id=74]
constant = 26.693

[sub_resource type="VisualShaderNodeScalarConstant" id=75]
constant = 1.89

[sub_resource type="VisualShaderNodeScalarConstant" id=76]
constant = 0.12

[sub_resource type="VisualShaderNodeInput" id=77]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=78]

[sub_resource type="VisualShaderNodeVectorCompose" id=79]

[sub_resource type="VisualShaderNodeScalarFunc" id=80]
function = 0

[sub_resource type="VisualShaderNodeInput" id=81]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=82]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=83]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=84]
operator = 2

[sub_resource type="VisualShader" id=85]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// Input:6
	float n_out6p0 = TIME;

// Scalar:10
	float n_out10p0 = 1.890000;

// ScalarOp:9
	float n_out9p0 = n_out6p0 * n_out10p0;

// ScalarFunc:5
	float n_out5p0 = sin(n_out9p0);

// ScalarOp:7
	float n_in7p1 = 1.00000;
	float n_out7p0 = n_out5p0 + n_in7p1;

// Scalar:11
	float n_out11p0 = 0.120000;

// ScalarOp:8
	float n_out8p0 = n_out7p0 * n_out11p0;

// VectorCompose:4
	float n_in4p0 = 0.00000;
	float n_in4p2 = 0.00000;
	vec3 n_out4p0 = vec3(n_in4p0, n_out8p0, n_in4p2);

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 + n_out4p0;

// Output:0
	VERTEX = n_out3p0;

}

void fragment() {
// Color:4
	vec3 n_out4p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out4p1 = 1.000000;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Color:3
	vec3 n_out3p0 = vec3(0.139336, 0.873452, 0.989046);
	float n_out3p1 = 1.000000;

// Scalar:9
	float n_out9p0 = 26.693001;

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out7p0.x;
	float n_out8p1 = n_out7p0.y;
	float n_out8p2 = n_out7p0.z;

// ScalarOp:12
	float n_out12p0 = n_out9p0 * n_out8p1;

// Scalar:15
	float n_out15p0 = 53.646000;

// Input:10
	float n_out10p0 = TIME;

// ScalarOp:14
	float n_out14p0 = n_out15p0 * n_out10p0;

// ScalarOp:11
	float n_out11p0 = n_out12p0 + n_out14p0;

// ScalarFunc:13
	float n_out13p0 = sin(n_out11p0);

// ScalarMix:6
	float n_in6p0 = 0.95000;
	float n_in6p1 = 1.00000;
	float n_out6p0 = mix(n_in6p0, n_in6p1, n_out13p0);

// VectorScalarMix:5
	vec3 n_in5p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out5p0 = mix(n_in5p0, n_out3p0, n_out6p0);

// Output:0
	ALBEDO = n_out4p0;
	ALPHA = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -665.815, 312.804 )
nodes/vertex/0/position = Vector2( 520, 160 )
nodes/vertex/2/node = SubResource( 77 )
nodes/vertex/2/position = Vector2( 80, 200 )
nodes/vertex/3/node = SubResource( 78 )
nodes/vertex/3/position = Vector2( 240, 220 )
nodes/vertex/4/node = SubResource( 79 )
nodes/vertex/4/position = Vector2( 120, 320 )
nodes/vertex/5/node = SubResource( 80 )
nodes/vertex/5/position = Vector2( -360, 300 )
nodes/vertex/6/node = SubResource( 81 )
nodes/vertex/6/position = Vector2( -540, 340 )
nodes/vertex/7/node = SubResource( 82 )
nodes/vertex/7/position = Vector2( -180, 320 )
nodes/vertex/8/node = SubResource( 83 )
nodes/vertex/8/position = Vector2( -20, 420 )
nodes/vertex/9/node = SubResource( 84 )
nodes/vertex/9/position = Vector2( -400, 360 )
nodes/vertex/10/node = SubResource( 75 )
nodes/vertex/10/position = Vector2( -560, 460 )
nodes/vertex/11/node = SubResource( 76 )
nodes/vertex/11/position = Vector2( -380, 500 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 3, 1, 5, 0, 7, 0, 7, 0, 8, 0, 8, 0, 4, 1, 6, 0, 9, 0, 10, 0, 9, 1, 11, 0, 8, 1, 9, 0, 5, 0 )
nodes/fragment/2/node = SubResource( 67 )
nodes/fragment/2/position = Vector2( -200, 120 )
nodes/fragment/3/node = SubResource( 68 )
nodes/fragment/3/position = Vector2( 40, 380 )
nodes/fragment/4/node = SubResource( 69 )
nodes/fragment/4/position = Vector2( 60, 120 )
nodes/fragment/5/node = SubResource( 70 )
nodes/fragment/5/position = Vector2( 180, 260 )
nodes/fragment/6/node = SubResource( 71 )
nodes/fragment/6/position = Vector2( -200, 340 )
nodes/fragment/7/node = SubResource( 72 )
nodes/fragment/7/position = Vector2( -1120, 340 )
nodes/fragment/8/node = SubResource( 73 )
nodes/fragment/8/position = Vector2( -980, 360 )
nodes/fragment/9/node = SubResource( 74 )
nodes/fragment/9/position = Vector2( -720, 300 )
nodes/fragment/10/node = SubResource( 61 )
nodes/fragment/10/position = Vector2( -760, 440 )
nodes/fragment/11/node = SubResource( 62 )
nodes/fragment/11/position = Vector2( -460, 440 )
nodes/fragment/12/node = SubResource( 63 )
nodes/fragment/12/position = Vector2( -520, 300 )
nodes/fragment/13/node = SubResource( 64 )
nodes/fragment/13/position = Vector2( -160, 520 )
nodes/fragment/14/node = SubResource( 65 )
nodes/fragment/14/position = Vector2( -340, 580 )
nodes/fragment/15/node = SubResource( 66 )
nodes/fragment/15/position = Vector2( -760, 520 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 1, 4, 0, 0, 0, 3, 0, 5, 1, 7, 0, 8, 0, 9, 0, 12, 0, 13, 0, 6, 2, 6, 0, 5, 2, 5, 0, 0, 5, 8, 1, 12, 1, 11, 0, 13, 0, 10, 0, 14, 1, 15, 0, 14, 0, 12, 0, 11, 0, 14, 0, 11, 1 )

[sub_resource type="ShaderMaterial" id=86]
shader = SubResource( 85 )

[sub_resource type="VisualShaderNodeScalarOp" id=87]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=88]
constant = Color( 0, 0, 0, 0 )

[sub_resource type="VisualShaderNodeColorConstant" id=89]
constant = Color( 0.205085, 0.749548, 0.957796, 1 )

[sub_resource type="VisualShaderNodeInput" id=90]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=91]

[sub_resource type="VisualShaderNodeVectorDecompose" id=92]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=93]

[sub_resource type="VisualShaderNodeScalarConstant" id=94]
constant = 1.283

[sub_resource type="VisualShaderNodeScalarOp" id=95]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 3

[sub_resource type="VisualShader" id=96]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out2p1 = 0.000000;

// Color:3
	vec3 n_out3p0 = vec3(0.205085, 0.749548, 0.957796);
	float n_out3p1 = 1.000000;

// Scalar:8
	float n_out8p0 = 1.283000;

// VectorScalarMix:7
	vec3 n_in7p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out7p0 = mix(n_in7p0, n_out3p0, n_out8p0);

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorDecompose:6
	float n_out6p0 = n_out4p0.x;
	float n_out6p1 = n_out4p0.y;
	float n_out6p2 = n_out4p0.z;

// ScalarOp:10
	float n_out10p0 = n_out6p1 * n_out6p1;

// VectorScalarMix:5
	vec3 n_in5p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out5p0 = mix(n_in5p0, n_out7p0, n_out10p0);

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -650.815, 416.804 )
modes/blend = 1
nodes/fragment/2/node = SubResource( 88 )
nodes/fragment/2/position = Vector2( 40, 160 )
nodes/fragment/3/node = SubResource( 89 )
nodes/fragment/3/position = Vector2( -400, 260 )
nodes/fragment/4/node = SubResource( 90 )
nodes/fragment/4/position = Vector2( -520, 380 )
nodes/fragment/5/node = SubResource( 91 )
nodes/fragment/5/position = Vector2( 80, 400 )
nodes/fragment/6/node = SubResource( 92 )
nodes/fragment/6/position = Vector2( -440, 540 )
nodes/fragment/7/node = SubResource( 93 )
nodes/fragment/7/position = Vector2( -0.815186, 313.804 )
nodes/fragment/8/node = SubResource( 94 )
nodes/fragment/8/position = Vector2( -260, 360 )
nodes/fragment/9/node = SubResource( 95 )
nodes/fragment/9/position = Vector2( -60, 580 )
nodes/fragment/10/node = SubResource( 87 )
nodes/fragment/10/position = Vector2( -240, 560 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 6, 0, 5, 0, 0, 5, 7, 0, 5, 1, 3, 0, 7, 1, 8, 0, 7, 2, 6, 1, 10, 0, 6, 1, 10, 1, 10, 0, 9, 1, 10, 0, 5, 2 )

[sub_resource type="ShaderMaterial" id=97]
shader = SubResource( 96 )

[sub_resource type="Animation" id=100]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath("Room/dOOR:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Room/dOOR:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Room/dOOR:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Room/DOOr left:rotation_degrees:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("Room/DOOr left:rotation_degrees:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("Room/DOOr left:rotation_degrees:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/6/type = "value"
tracks/6/path = NodePath("Door Sound Effect:playing")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="Animation" id=101]
resource_name = "dooropen"
length = 3.0
step = 0.0166667
tracks/0/type = "bezier"
tracks/0/path = NodePath("Room/dOOR:rotation_degrees:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Room/dOOR:rotation_degrees:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.133333, -1.36643, -93.3193, 0, 0, 0.133333, 0.323013, -93.1741, 0, 0, 1.25, 3.39162, -180, -1.05, -2.20822, 0.25, 0 ),
"times": PoolRealArray( 0, 0.55, 0.95, 3 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Room/dOOR:rotation_degrees:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Room/DOOr left:rotation_degrees:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("Room/DOOr left:rotation_degrees:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.0833333, 2.06139, -86.1183, 0, 0, 0.283333, -0.00256348, -86.1183, 0, 0, 1.25, 0.763077, 0, -0.671551, -2.60158, 0.25, 0 ),
"times": PoolRealArray( 0, 0.55, 0.95, 3 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("Room/DOOr left:rotation_degrees:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}

[sub_resource type="BoxShape" id=102]
extents = Vector3( 2.283, 0.083, 1.653 )

[sub_resource type="BoxShape" id=103]
extents = Vector3( 0.083, 1.277, 1.648 )

[sub_resource type="BoxShape" id=104]
extents = Vector3( 2.30485, 1.16858, 1.60552 )

[sub_resource type="BoxShape" id=105]
extents = Vector3( 0.2634, 1.17681, 1.78638 )

[sub_resource type="BoxShape" id=106]
extents = Vector3( 2.21166, 0.154799, 1.6305 )

[sub_resource type="BoxShape" id=107]
extents = Vector3( 2.02817, 1.22992, 1.67026 )

[sub_resource type="BoxShape" id=108]
extents = Vector3( 7.46954, 2.96478, 2.28166 )

[node name="solstice Shipping Service yay" instance=ExtResource( 6 )]
script = ExtResource( 5 )

[node name="BOX PILE" parent="." index="1"]
material/0 = SubResource( 3 )

[node name="Window" parent="." index="2"]
visible = false
material/0 = SubResource( 7 )

[node name="Room" parent="." index="3"]
material/1 = SubResource( 10 )

[node name="dOOR" parent="Room" index="0"]
transform = Transform( -1.91213e-08, 0, -0.596516, 0, 0.833333, 0, 0.437445, 0, -2.60745e-08, -1, 0, 0.999999 )
material/0 = ExtResource( 3 )

[node name="StaticBody" type="StaticBody" parent="Room/dOOR" index="0"]

[node name="CollisionShape" type="CollisionShape" parent="Room/dOOR/StaticBody" index="0"]
transform = Transform( 1, 0, -3.55271e-14, 0, 0.999999, 0, 0, 0, 0.999999, 0, 1.18359, -0.993946 )
shape = SubResource( 98 )

[node name="DOOr left" parent="Room" index="1"]
transform = Transform( -1.91213e-08, 0, -0.596516, 0, 0.833333, 0, 0.437445, 0, -2.60745e-08, 0.999999, 0, 1 )
material/0 = ExtResource( 3 )

[node name="StaticBody" type="StaticBody" parent="Room/DOOr left" index="0"]

[node name="CollisionShape" type="CollisionShape" parent="Room/DOOr left/StaticBody" index="0"]
transform = Transform( 1, 0, -3.55271e-14, 0, 0.999999, 0, 0, 0, 0.999999, 0, 1.18359, 0.896042 )
shape = SubResource( 99 )

[node name="CSGMesh" type="CSGMesh" parent="." index="4"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.2, 1.702 )
mesh = SubResource( 11 )
material = SubResource( 59 )

[node name="CSGMesh2" type="CSGMesh" parent="." index="5"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0299025, 2.90913, 1.72835 )
mesh = SubResource( 60 )
material = SubResource( 86 )

[node name="CSGMesh3" type="CSGMesh" parent="." index="6"]
transform = Transform( 1, 0, 0, 0, 0.628666, 0, 0, 0, 1, -0.0299025, 2.68371, 1.68955 )
mesh = SubResource( 60 )
material = SubResource( 97 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="7"]
anims/RESET = SubResource( 100 )
anims/dooropen = SubResource( 101 )

[node name="StaticBody" type="StaticBody" parent="." index="8"]

[node name="CollisionShape" type="CollisionShape" parent="StaticBody" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0873127, 0 )
shape = SubResource( 102 )

[node name="StaticBody2" type="StaticBody" parent="." index="9"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.49652, -0.0692279 )

[node name="CollisionShape" type="CollisionShape" parent="StaticBody2" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0873127, 0 )
shape = SubResource( 102 )

[node name="StaticBody3" type="StaticBody" parent="." index="10"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.49652, -0.0692279 )

[node name="CollisionShape" type="CollisionShape" parent="StaticBody3" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.96117, -1.3248, 0 )
shape = SubResource( 103 )

[node name="Interiar" type="Area" parent="." index="11"]

[node name="CollisionShape" type="CollisionShape" parent="Interiar" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.22686, -0.0372477 )
shape = SubResource( 104 )

[node name="door open area" type="Area" parent="." index="12"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.93912, 1.27568, 0 )

[node name="CollisionShape" type="CollisionShape" parent="door open area" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.20038, -0.0778539, 0 )
shape = SubResource( 105 )

[node name="giv gift" type="Area" parent="." index="13"]

[node name="CollisionShape" type="CollisionShape" parent="giv gift" index="0"]
shape = SubResource( 106 )

[node name="outside let me iiiin area" type="Area" parent="." index="14"]

[node name="CollisionShape" type="CollisionShape" parent="outside let me iiiin area" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.29113, 1.07206, 0 )
shape = SubResource( 107 )

[node name="CONFIRM THAT THE PLAYER HAS INFACT LEFT THE BUILDING" type="Area" parent="." index="15"]

[node name="CollisionShape" type="CollisionShape" parent="CONFIRM THAT THE PLAYER HAS INFACT LEFT THE BUILDING" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.48369, 0 )
shape = SubResource( 108 )

[node name="Door Sound Effect" type="AudioStreamPlayer3D" parent="." index="16"]
stream = ExtResource( 7 )

[connection signal="body_entered" from="Interiar" to="." method="_on_Interiar_body_entered"]
[connection signal="body_exited" from="Interiar" to="." method="_on_Interiar_body_exited"]
[connection signal="body_entered" from="door open area" to="." method="_on_door_open_area_body_entered"]
[connection signal="body_exited" from="door open area" to="." method="_on_door_open_area_body_exited"]
[connection signal="body_entered" from="giv gift" to="." method="_on_giv_gift_body_entered"]
[connection signal="body_entered" from="outside let me iiiin area" to="." method="_on_outside_let_me_iiiin_area_body_entered"]
[connection signal="body_exited" from="outside let me iiiin area" to="." method="_on_outside_let_me_iiiin_area_body_exited"]
[connection signal="body_exited" from="CONFIRM THAT THE PLAYER HAS INFACT LEFT THE BUILDING" to="." method="_on_CONFIRM_THAT_THE_PLAYER_HAS_INFACT_LEFT_THE_BUILDING_body_exited"]
