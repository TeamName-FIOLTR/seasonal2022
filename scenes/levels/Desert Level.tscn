[gd_scene load_steps=22 format=2]

[ext_resource path="res://scenes/UI/Gameplay UI.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/levels/Desert Level.gd" type="Script" id=2]
[ext_resource path="res://assets/models/desert ground fr tho.glb" type="PackedScene" id=3]
[ext_resource path="res://assets/textures/ground054_1k/Ground054_1K_NormalGL.jpg" type="Texture" id=5]
[ext_resource path="res://assets/textures/ground054_1k/Ground054_1K_Roughness.jpg" type="Texture" id=6]
[ext_resource path="res://assets/textures/ground054_1k/Ground054_1K_Color.jpg" type="Texture" id=7]
[ext_resource path="res://assets/textures/ground054_1k/Ground054_1K_Displacement.jpg" type="Texture" id=8]
[ext_resource path="res://scenes/levels/desert 3d collision mesh.tscn" type="PackedScene" id=9]
[ext_resource path="res://assets/textures/debug_texture.png" type="Texture" id=10]
[ext_resource path="res://scenes/Entites/Player 3D.tscn" type="PackedScene" id=11]

[sub_resource type="ProceduralSky" id=1]
ground_bottom_color = Color( 0.839216, 0.917647, 0.980392, 1 )
ground_horizon_color = Color( 0.647059, 0.839216, 0.945098, 1 )

[sub_resource type="Environment" id=2]
background_mode = 2
background_sky = SubResource( 1 )
fog_enabled = true
tonemap_mode = 4
tonemap_exposure = 0.43
adjustment_enabled = true

[sub_resource type="Shader" id=12]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_depth : hint_black;
uniform float depth_scale;
uniform int depth_min_layers;
uniform int depth_max_layers;
uniform vec2 depth_flip;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
		float num_layers = mix(float(depth_max_layers),float(depth_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
		float layer_depth = 1.0 / num_layers;
		float current_layer_depth = 0.0;
		vec2 P = view_dir.xy * depth_scale;
		vec2 delta = P / num_layers;
		vec2 ofs = base_uv;
		float depth = textureLod(texture_depth, ofs, 0.0).r;
		float current_depth = 0.0;
		while(current_depth < depth) {
			ofs -= delta;
			depth = textureLod(texture_depth, ofs, 0.0).r;
			current_depth += layer_depth;
		}
		vec2 prev_ofs = ofs + delta;
		float after_depth  = depth - current_depth;
		float before_depth = textureLod(texture_depth, prev_ofs, 0.0).r - current_depth + layer_depth;
		float weight = after_depth / (after_depth - before_depth);
		ofs = mix(ofs,prev_ofs,weight);
		base_uv=ofs;
	}
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.234
shader_param/depth_scale = 0.065
shader_param/depth_min_layers = 8
shader_param/depth_max_layers = 32
shader_param/depth_flip = Vector2( 1, 1 )
shader_param/uv1_scale = Vector3( 20, 20, 20 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 7 )
shader_param/texture_roughness = ExtResource( 6 )
shader_param/texture_normal = ExtResource( 5 )
shader_param/texture_depth = ExtResource( 8 )

[sub_resource type="CubeMesh" id=14]

[sub_resource type="VisualShader" id=20]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 115.5, 125 )

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 20 )

[sub_resource type="QuadMesh" id=16]
size = Vector2( 0.8, 0.8 )

[sub_resource type="VisualShaderNodeTexture" id=17]
texture = ExtResource( 10 )

[sub_resource type="VisualShader" id=18]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 115.5, 125 )
modes/cull = 2
nodes/fragment/2/node = SubResource( 17 )
nodes/fragment/2/position = Vector2( 40, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )

[node name="Desert Level" type="Spatial" groups=["Player Status Recievers"]]
script = ExtResource( 2 )
camera_3d_node = NodePath("Camera")
camera_follow_point = Vector3( -14.252, -12.782, -9.466 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -20, 19.063, 10.05 )
keep_aspect = 0
current = true
fov = 90.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="Camera"]
environment = SubResource( 2 )

[node name="RayCast" type="RayCast" parent="Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 500, 0 )
enabled = true
cast_to = Vector3( 0, -1000, 0 )
collision_mask = 7
collide_with_areas = true

[node name="Gameplay UI" parent="." instance=ExtResource( 1 )]

[node name="desert ground fr tho" parent="." instance=ExtResource( 3 )]

[node name="Terrain" parent="desert ground fr tho" index="0"]
material/0 = SubResource( 13 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.994198, -0.0815185, -0.0701789, 0, -0.652429, 0.75785, -0.107566, -0.753453, -0.648644, -84.6963, 7.15837, 0.91346 )
shadow_enabled = true
shadow_color = Color( 0.0509804, 0.0823529, 0.0784314, 1 )
directional_shadow_mode = 0

[node name="desert 3d collision mesh" parent="." instance=ExtResource( 9 )]

[node name="Drone Cube" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -91.1037, 5.43525, 1.69473 )
mesh = SubResource( 14 )
material = SubResource( 21 )

[node name="CSGMesh2" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -86.9745, 5.11089, 0.19469 )
mesh = SubResource( 16 )
material = SubResource( 19 )

[node name="Player 3D" parent="." instance=ExtResource( 11 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -89.4783, 4.83607, 1.41005 )
collision_mask = 3
mass = 1.0
continuous_cd = true
axis_lock_linear_z = true
axis_lock_angular_x = true
axis_lock_angular_y = true
thrust = 3.0

[editable path="desert ground fr tho"]
